// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Application settings
model Settings {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  value       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BasePreference {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  key          String
  defaultValue Boolean
  description  String
  Preference   Preference[]
}

// User settings
model Preference {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  // Settings
  base   BasePreference @relation(fields: [baseId], references: [id])
  baseId Int
  value  Boolean
}

// USER

model User {
  id       Int     @id @default(autoincrement())
  isActive Boolean @default(true)

  firstName         String
  lastName          String
  ldapId            String            @unique
  email             String            @unique
  personalEmail     String?
  nickname          String?           @unique
  picture           String?
  birthDate         DateTime?         @db.Date
  phone             String?
  firstDrink        DateTime?         @db.Date
  becameFeut        DateTime?         @db.Date
  becameMember      DateTime?         @db.Date
  lastLoggedin      DateTime          @default(now())
  StrafbakGiven     Strafbak[]        @relation("strafbakGiver")
  StrafbakReceived  Strafbak[]        @relation("strafbakReceiver")
  MaluspuntGiven    Maluspunt[]       @relation("maluspuntGiver")
  MaluspuntReceived Maluspunt[]       @relation("maluspuntReceiver")
  CommitteeMember   CommitteeMember[]
  Account           Account[]
  Session           Session[]

  FinancialPersonDataUser FinancialPersonDataUser[]
  Attending               Attending[]
  Link                    Link[]
  LinkClick               LinkClick[]
  EmailAliasUser          EmailAliasUser[]
  ClickSession            ClickSession[]
  Preference              Preference[]
  Photo                   Photo[]
  PhotoCreator            PhotoCreator[]
  PhotosWithTags          PhotosWithTags[]
  PhotoRating             PhotoRating[]
  PhotoTaggedIn           PhotoPersonTag[]          @relation("taggedInPhoto")
  PhotoTaggedBy           PhotoPersonTag[]          @relation("photoTaggedBy")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String? @db.LongText
  expires_in        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.LongText
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Committee {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  ldapId   String  @unique
  isActive Boolean @default(true)

  CommitteeMember              CommitteeMember[]
  Acivity                      Activity[]
  FinancialPersonDataCommittee FinancialPersonDataCommittee[]
  EmailAliasCommittee          EmailAliasCommittee[]
}

model CommitteeMember {
  id          Int       @id @default(autoincrement())
  committee   Committee @relation(fields: [committeeId], references: [id], onDelete: Cascade)
  committeeId Int
  member      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  joinDate    DateTime  @default(now()) @db.Date
  leaveDate   DateTime? @db.Date
  function    String    @default("Algemeen lid")
}

// STRAFBAKKEN

model Strafbak {
  id          Int       @id @default(autoincrement())
  giver       User?     @relation("strafbakGiver", fields: [giverId], references: [id])
  giverId     Int?
  receiver    User      @relation("strafbakReceiver", fields: [receiverId], references: [id])
  receiverId  Int
  reason      String?
  dateCreated DateTime  @default(now())
  dateDeleted DateTime?
  location    String?

  @@index([giverId])
}

// MALUSPUNTEN

model Maluspunt {
  id          Int      @id @default(autoincrement())
  giver       User     @relation("maluspuntGiver", fields: [giverId], references: [id])
  giverId     Int
  receiver    User     @relation("maluspuntReceiver", fields: [receiverId], references: [id])
  receiverId  Int
  reason      String?
  dateCreated DateTime @default(now())
  amount      Int      @default(1)

  @@index([giverId])
}

// Activiteiten

model Activity {
  // Administratieve gegevens
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String            @db.LongText
  startTime   DateTime
  endTime     DateTime
  location    ActivityLocation? @relation(fields: [locationId], references: [id])
  locationId  Int?

  // Is deze activiteit alleen zichtbaar voor leden?
  membersOnly Boolean     @default(false)
  // Wie organiseerd dit?
  organisedBy Committee   @relation(fields: [committeeId], references: [id])
  committeeId Int
  // Wie zijn er aanwezig?
  attending   Attending[]

  // Plaatje
  image String?

  // URL naar meer informatie
  url String? @db.Text

  // Is dit verwijderd?
  isActive Boolean @default(true)

  // Foreign Keys
  FinancialPersonDataActivity FinancialPersonDataActivity[]
}

model ActivityLocation {
  id          Int        @id @default(autoincrement())
  name        String
  adress      String
  country     String
  postalCode  String
  city        String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isActive    Boolean    @default(true)
  Activity    Activity[]
}

model Attending {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId Int

  isAttending Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
}

// FINANCIALS

// Alle vormen van betalingen die mensen in het systeem kunnen zetten zijn alles behalve Transaction
// Die wordt gegenereerd door IBS

// Grootboek rekening
model Ledger {
  // Administratieve gegevens
  id          Int           @id
  name        String
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  // Foreign keys
  Transaction Transaction[]
  isActive    Boolean       @default(true)
}

// Categorie waar een product onder kan vallen
model ProductCategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  Product     Product[]
}

enum ProductType {
  ALCOHOL
  FOOD
  OTHER
}

// Een product is alles wat verkocht en ingekocht kan worden
model Product {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String
  price       Float

  // Dit bepaald wat er in data kan staan
  productType ProductType @default(OTHER)
  // Deze is speciaal, want dit bevat niet echt nuttige data, maar kan wel leuk zijn
  data        Json        @db.Json

  // Foreign keys
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  Sale        Sale[]
  Acquisition Acquisition[]
  // Een product kan niet worden verwijderd, wel uitgeschakeld
  isActive    Boolean         @default(true)
}

enum FinancialPersonType {
  USER
  GROUP
  ACTIVITY
  INVICTUS
  COMMITTEE
  OTHER
}

// Onder een financieel persoon valt een gebruiker, een groep van gebruikers, het dispuut, etc.
// Bijvoorbeeld 
model FinancialPerson {
  id   Int                 @id @default(autoincrement())
  type FinancialPersonType

  // Naam van het financiele persoon, denk aan "O.D.D. Invictus", "Meeborrel" of gewoon de naam van een lid
  name    String
  // Huidige saldo
  balance Float  @default(0)

  isActive Boolean @default(true)

  // Foreign keys
  FinancialGroup               FinancialGroup[]
  FinancialPersonDataUser      FinancialPersonDataUser[]
  FinancialPersonDataCommittee FinancialPersonDataCommittee[]
  FinancialPersonDataActivity  FinancialPersonDataActivity[]
  FinancialPersonDataOther     FinancialPersonDataOther[]
  FinancialGroupPersonElement  FinancialGroupPersonElement[]

  TransactionFrom Transaction[] @relation("TransactionFrom")
  TransactionTo   Transaction[] @relation("TransactionTo")
  Sale            Sale[]
  Acquisition     Acquisition[]
  Declaration     Declaration[]
  Streeplijst     Streeplijst[]
}

// Extra data voor FinancialPerson, afhankelijk van FinancialPersonType

// FinancialPersonType.USER
// Dit is een 1-op-1 relatie met User
model FinancialPersonDataUser {
  person   FinancialPerson @relation(fields: [personId], references: [id])
  personId Int             @id
  user     User            @relation(fields: [userId], references: [id])
  userId   Int
}

// FinancialPersonType.GROUP
// Verwijst naar een groepje financialpersons (bijvoorbeeld: invakancie, etc.)
model FinancialGroup {
  person   FinancialPerson @relation(fields: [personId], references: [id])
  personId Int             @id

  elements FinancialGroupPersonElement[]
}

model FinancialGroupPersonElement {
  group    FinancialGroup  @relation(fields: [groupId], references: [personId])
  groupId  Int
  person   FinancialPerson @relation(fields: [personId], references: [id])
  personId Int

  @@id([groupId, personId])
}

// FinancialPersonType.ACTIVITY
// Verwijst naar een activiteit, wordt redelijk hetzelfde gebruikt als GROUP maar voorkomt dat een groep wordt gemaakt voor elke borrel
model FinancialPersonDataActivity {
  person     FinancialPerson @relation(fields: [personId], references: [id])
  personId   Int             @id
  activity   Activity        @relation(fields: [activityId], references: [id])
  activityId Int
}

// FinancialPersonType.INVICTUS
// Verwijst naar het dispuut als financieel persoon
// Geen model nodig

// FinancialPersonType.COMMITTEE
// Verwijst naar een commissie, wordt redelijk hetzelfde gebruikt als GROUP maar maakt het makkelijk om een commissie te verwijderen
model FinancialPersonDataCommittee {
  person      FinancialPerson @relation(fields: [personId], references: [id])
  personId    Int             @id
  committee   Committee       @relation(fields: [committeeId], references: [id])
  committeeId Int
}

// FinancialPersonType.OTHER
// Verwijst naar iets of iemand, die iig niet IBS gebruiker is.
// Alleen gebruiken als het echt niet anders kan, en met duidelijke notities
// denk aan pollo, 44 etc.
model FinancialPersonDataOther {
  person      FinancialPerson @relation(fields: [personId], references: [id])
  personId    Int             @id
  name        String
  description String
}

model Transaction {
  // Administratieve gegevens
  id          Int      @id @default(autoincrement())
  ledger      Ledger?  @relation(fields: [ledgerId], references: [id])
  ledgerId    Int?
  description String
  createdAt   DateTime @default(now())
  // Transactie gegevens
  price       Float

  // Gebruikers

  from   FinancialPerson @relation(fields: [fromId], references: [id], name: "TransactionFrom")
  fromId Int
  to     FinancialPerson @relation(fields: [toId], references: [id], name: "TransactionTo")
  toId   Int
}

// In een verkoop kan iemand x aantal producten kopen
// Prijs voor verkoop wordt pas bepaald zodra de transactie aangemaakt wordt
model Sale {
  // Administratieve gegevens
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  // Hoeveel van welk product zijn er gekocht
  product   Product         @relation(fields: [productId], references: [id])
  productId Int
  amount    Int
  // Wie heeft er gekocht
  person    FinancialPerson @relation(fields: [personId], references: [id])
  personId  Int

  // Link naar streeplijst (indien van toepassing)
  streeplijst   Streeplijst? @relation(fields: [streeplijstId], references: [id])
  streeplijstId Int?

  // Een verkoop kan niet worden verwijdered, maar kan wel worden gedeactiveerd
  isActive Boolean @default(true)
}

model Streeplijst {
  // Administratieve gegevens
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Wanneer is de streeplijst aangemaakt
  date DateTime

  // Wie heeft dit verwerkt
  person   FinancialPerson @relation(fields: [personId], references: [id])
  personId Int

  // Een streeplijst kan niet worden verwijdered, maar kan wel worden gedeactiveerd
  isActive Boolean @default(true)

  // Foreign keys
  Sale Sale[]
}

// Een inkoop
// Oke sorry voor deze naam maar Purchase vond ik te verwarrend met Sale
model Acquisition {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Hoe veel van welk product zijn er gekocht
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  amount    Int
  price     Float

  // Bonnetje
  receipt String

  purchaseLocation String

  // Wie heeft er gekocht
  person   FinancialPerson @relation(fields: [personId], references: [id])
  personId Int

  // Een inkoop kan niet worden verwijdered, maar kan wel worden gedeactiveerd
  isActive Boolean @default(true)
}

// Een declaratie is een generiekere vorm van inkoop
model Declaration {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  // Wie heeft er gekocht
  person    FinancialPerson @relation(fields: [personId], references: [id])
  personId  Int

  // Hoeveel wil iemand terug
  price           Float
  // Wat is de reden voor deze declaratie
  reason          String
  // Hoe is dit betaald? (Eigen rekening, bank, contant, of Invictus bankrekening)
  methodOfPayment String  @default("Eigen rekening")
  // Bonnetje (link naar cdn)
  receipt         String?

  // Heeft de penningmeester dit goedgekeurd?
  // Als dit niet is goedgekeurd wordt het ook niet omgezet naar een transactie
  accepted Boolean @default(false)
  // Heeft de penningmeester dit afgekeurd?
  // Als dit is afgekeurd wordt het ook niet omgezet naar een transactie
  denied   Boolean @default(false)
}

//
// LINK SHORTNER
//

model Link {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // De link zelf
  link String @db.Text

  // De link die de gebruiker ziet
  shortLink String @unique

  // De persoon die de link heeft aangemaakt
  user   User @relation(fields: [userId], references: [id])
  userId Int

  LinkClick LinkClick[]
}

model LinkClick {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // De link die is aangeklikt
  link   Link @relation(fields: [linkId], references: [id])
  linkId Int

  // De persoon die de link heeft aangeklikt
  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

//
// Email
//

// Een email adres
// Bestaande uit de alias (bijv. senaat@) en het domein (bijv. example.com)
// Samen vormen ze senaat@example.com
model EmailAlias {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // bijvoorbeeld senaat
  alias String @unique

  // receivers
  EmailContact        EmailContact[]
  EmailAliasCommittee EmailAliasCommittee[]
  EmailAliasUser      EmailAliasUser[]
}

model EmailAliasCommittee {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // bijvoorbeeld senaat
  alias        EmailAlias @relation(fields: [emailAliasId], references: [id], onDelete: Cascade)
  emailAliasId Int
  committee    Committee  @relation(fields: [committeeId], references: [id], onDelete: Cascade)
  committeeId  Int
}

model EmailAliasUser {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // bijvoorbeeld senaat
  alias        EmailAlias @relation(fields: [emailAliasId], references: [id], onDelete: Cascade)
  emailAliasId Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
}

// Een extern email adres waar aliassen heen kunnen sturen
// kan natuurlijk ook iets@ -> example@gmail.com
model EmailContact {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address      String
  EmailAlias   EmailAlias @relation(fields: [emailAliasId], references: [id], onDelete: Cascade)
  emailAliasId Int
}

//
// COOKIE CLICKER
//

model ClickSession {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  amount    Int
  startTime DateTime
  endTime   DateTime @default(now())
}

//
// PHOTO GALLERY
//
model Photo {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // Date photo taken
  date DateTime?

  // Photo
  photo String @unique

  // Description
  description String?

  tags PhotosWithTags[]

  uploader     User?            @relation(fields: [uploaderId], references: [id])
  uploaderId   Int?
  creator      PhotoCreator     @relation(fields: [creatorId], references: [id])
  creatorId    Int
  ratings      PhotoRating[]
  peopleTagged PhotoPersonTag[]
}

model PhotoCreator {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  name      String   @unique

  Photo Photo[]
}

model PhotoTag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  name String @unique

  photos PhotosWithTags[]
}

model PhotosWithTags {
  photo        Photo    @relation(fields: [photoId], references: [id])
  photoId      Int
  photoTag     PhotoTag @relation(fields: [photoTagId], references: [id])
  photoTagId   Int
  assignedBy   User     @relation(fields: [assignedById], references: [id])
  assignedById Int

  @@id([photoId, photoTagId])
}

// Persoon x is getagd in foto y door persoon z
model PhotoPersonTag {
  createdAt DateTime @default(now())

  name String @unique

  tagger   User @relation("photoTaggedBy", fields: [taggerId], references: [id])
  taggerId Int

  photo   Photo @relation(fields: [photoId], references: [id])
  user    User  @relation("taggedInPhoto", fields: [userId], references: [id])
  photoId Int
  userId  Int

  @@id([photoId, userId])
}

model PhotoRating {
  createdAt DateTime @default(now())

  rating Int @default(1)

  Photo   Photo @relation(fields: [photoId], references: [id])
  photoId Int
  User    User  @relation(fields: [userId], references: [id])
  userId  Int

  @@id([photoId, userId])
}
