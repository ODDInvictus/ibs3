// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// USER

model User {
  id                Int               @id @default(autoincrement())
  firstName         String
  lastName          String
  ldapId            String            @unique
  email             String            @unique
  nickname          String?           @unique
  picture           String?
  birthDate         DateTime?         @db.Date
  phone             String?
  firstDrink        DateTime?         @db.Date
  becameFeut        DateTime?         @db.Date
  becameMember      DateTime?         @db.Date
  lastLoggedin      DateTime          @default(now())
  StrafbakGiven     Strafbak[]        @relation("strafbakGiver")
  StrafbakReceived  Strafbak[]        @relation("strafbakReceiver")
  MaluspuntGiven    Maluspunt[]       @relation("maluspuntGiver")
  MaluspuntReceived Maluspunt[]       @relation("maluspuntReceiver")
  CommitteeMember   CommitteeMember[]
  TransactionFrom   Transaction[]     @relation("transactionFrom")
  TransactionTo     Transaction[]     @relation("transactionTo")
  Account           Account[]
  Session           Session[]
  Sale              Sale[]
  Acquisition       Acquisition[]
  Declaration       Declaration[]
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String? @db.LongText
  expires_in        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.LongText
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Committee {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  ldapId          String            @unique
  CommitteeMember CommitteeMember[]
  Acivity         Activity[]
}

model CommitteeMember {
  committee   Committee @relation(fields: [committeeId], references: [id], onDelete: Cascade)
  committeeId Int
  member      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  joinDate    DateTime  @default(now()) @db.Date
  leaveDate   DateTime? @db.Date
  function    String    @default("Algemeen lid")

  @@id([committeeId, userId, joinDate])
}

// STRAFBAKKEN

model Strafbak {
  id          Int       @id @default(autoincrement())
  giver       User      @relation("strafbakGiver", fields: [giverId], references: [id])
  giverId     Int
  receiver    User      @relation("strafbakReceiver", fields: [receiverId], references: [id])
  receiverId  Int
  reason      String?
  dateCreated DateTime  @default(now())
  dateDeleted DateTime?

  @@index([giverId])
}

// MALUSPUNTEN

model Maluspunt {
  id          Int      @id @default(autoincrement())
  giver       User     @relation("maluspuntGiver", fields: [giverId], references: [id])
  giverId     Int
  receiver    User     @relation("maluspuntReceiver", fields: [receiverId], references: [id])
  receiverId  Int
  reason      String?
  dateCreated DateTime @default(now())
  amount      Int      @default(1)

  @@index([giverId])
}

// ACTIVITY

model Activity {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  start       DateTime
  location    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  membersOnly Boolean   @default(false)
  organisedBy Committee @relation(fields: [committeeId], references: [id])
  committeeId Int
}

// FINANCIALS

// TODO: Succes

// Alle vormen van betalingen die mensen in het systeem kunnen zetten zijn alles behalve Transaction
// Die wordt gegenereerd door IBS

// Grootboek rekening
model Ledger {
  // Administratieve gegevens
  id          Int      @id
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  Transaction Transaction[]

  isActive Boolean @default(true)
}

// Categorie waar een product onder kan vallen
model ProductCategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  Product     Product[]
}

// Een product is alles wat verkocht en ingekocht kan worden
model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String
  price       Int

  // Dit bepaald wat er in data kan staan
  productType String @default("product")
  // Deze is speciaal, want dit bevat niet echt nuttige data, maar kan wel leuk zijn
  data        Json   @db.Json

  // Foreign keys
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId  Int
  Sale        Sale[]
  Acquisition Acquisition[]

  // Een product kan niet worden verwijderd, wel uitgeschakeld
  isActive Boolean @default(true)
}

model Transaction {
  // Administratieve gegevens
  id          Int      @id @default(autoincrement())
  ledger      Ledger   @relation(fields: [ledgerId], references: [id])
  ledgerId    Int
  description String
  createdAt   DateTime @default(now())

  // Transactie gegevens
  price   Float
  settled Boolean @default(false)

  // Gebruikers
  from   User @relation(fields: [fromId], references: [id], name: "transactionFrom")
  fromId Int
  to     User @relation(fields: [toId], references: [id], name: "transactionTo")
  toId   Int
}

// In een verkoop kan iemand x aantal producten kopen
// Prijs voor verkoop wordt pas bepaald zodra de transactie aangemaakt wordt
model Sale {
  // Administratieve gegevens
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Hoeveel van welk product zijn er gekocht
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  amount    Int

  // Wie heeft er gekocht
  user   User @relation(fields: [userId], references: [id])
  userId Int

  // Een verkoop kan niet worden verwijdered, maar kan wel worden gedeactiveerd
  isActive Boolean @default(true)
}

// Een inkoop
// Oke sorry voor deze naam maar Purchase vond ik te verwarrend met Sale
model Acquisition {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Hoe veel van welk product zijn er gekocht
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  amount    Int

  // Wie heeft er gekocht
  user   User @relation(fields: [userId], references: [id])
  userId Int

  // Een inkoop kan niet worden verwijdered, maar kan wel worden gedeactiveerd
  isActive Boolean @default(true)
}

// Een declaratie is een generiekere vorm van inkoop
model Declaration {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Wie heeft er gekocht
  user   User @relation(fields: [userId], references: [id])
  userId Int

  // Hoeveel wil iemand terug
  price           Float
  // Wat is de reden voor deze declaratie
  reason          String
  // Hoe is dit betaald? (Eigen rekening, bank, contant, of Invictus bankrekening)
  methodOfPayment String @default("Eigen rekening")

  // Heeft de penningmeester dit goedgekeurd?
  // Als dit niet is goedgekeurd wordt het ook niet omgezet naar een transactie
  accepted Boolean @default(false)
}
