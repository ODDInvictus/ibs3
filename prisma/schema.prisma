// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Application settings
model Settings {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  value       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BasePreference {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  key          String
  defaultValue Boolean
  description  String
  Preference   Preference[]
}

// User settings
model Preference {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  // Settings
  base   BasePreference @relation(fields: [baseId], references: [id])
  baseId Int
  value  Boolean
}

// USER

model User {
  id       Int     @id @default(autoincrement())
  isActive Boolean @default(true)

  firstName        String
  lastName         String
  ldapId           String    @unique
  email            String    @unique
  personalEmail    String?
  nickname         String?   @unique
  profilePicture   Photo?    @relation("profilePicture", fields: [profilePictureId], references: [id], onDelete: SetNull)
  profilePictureId Int?
  birthDate        DateTime? @db.Date
  phone            String?
  firstDrink       DateTime? @db.Date
  becameFeut       DateTime? @db.Date
  becameMember     DateTime? @db.Date
  lastLoggedin     DateTime  @default(now())
  preferredTheme   String    @default("light")

  StrafbakGiven     Strafbak[]        @relation("strafbakGiver")
  StrafbakReceived  Strafbak[]        @relation("strafbakReceiver")
  MaluspuntGiven    Maluspunt[]       @relation("maluspuntGiver")
  MaluspuntReceived Maluspunt[]       @relation("maluspuntReceiver")
  CommitteeMember   CommitteeMember[]
  Account           Account[]
  Session           Session[]

  FinancialPersonDataUser FinancialPersonDataUser[]
  Attending               Attending[]
  Link                    Link[]
  LinkClick               LinkClick[]
  EmailAliasUser          EmailAliasUser[]
  ClickSession            ClickSession[]
  Preference              Preference[]
  TrackReaction           TrackReaction[]
  Photo                   Photo[]
  PhotoCreator            PhotoCreator[]
  PhotosWithTags          PhotosWithTags[]
  PhotoRating             PhotoRating[]
  PhotoTaggedIn           PhotoPersonTag[]          @relation("taggedInPhoto")
  PhotoTaggedBy           PhotoPersonTag[]          @relation("photoTaggedBy")
  CommentsMade            Comment[]
  Journal                 Journal[]
  Streeplijst             Streeplijst[]
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String? @db.LongText
  expires_in        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.LongText
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Committee {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  ldapId   String  @unique
  isActive Boolean @default(true)

  CommitteeMember              CommitteeMember[]
  Acivity                      Activity[]
  FinancialPersonDataCommittee FinancialPersonDataCommittee[]
  EmailAliasCommittee          EmailAliasCommittee[]
}

model CommitteeMember {
  id          Int       @id @default(autoincrement())
  committee   Committee @relation(fields: [committeeId], references: [id], onDelete: Cascade)
  committeeId Int
  member      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  joinDate    DateTime  @default(now()) @db.Date
  leaveDate   DateTime? @db.Date
  function    String    @default("Algemeen lid")
}

// STRAFBAKKEN

model Strafbak {
  id          Int       @id @default(autoincrement())
  giver       User?     @relation("strafbakGiver", fields: [giverId], references: [id])
  giverId     Int?
  receiver    User      @relation("strafbakReceiver", fields: [receiverId], references: [id])
  receiverId  Int
  reason      String?
  dateCreated DateTime  @default(now())
  dateDeleted DateTime?
  location    String?

  @@index([giverId])
}

// MALUSPUNTEN

model Maluspunt {
  id          Int      @id @default(autoincrement())
  giver       User     @relation("maluspuntGiver", fields: [giverId], references: [id])
  giverId     Int
  receiver    User     @relation("maluspuntReceiver", fields: [receiverId], references: [id])
  receiverId  Int
  reason      String?
  dateCreated DateTime @default(now())
  amount      Int      @default(1)

  @@index([giverId])
}

// Activiteiten

model Activity {
  // Administratieve gegevens
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String            @db.LongText
  startTime   DateTime
  endTime     DateTime
  location    ActivityLocation? @relation(fields: [locationId], references: [id])
  locationId  Int?

  // Is deze activiteit alleen zichtbaar voor leden?
  membersOnly Boolean     @default(false)
  // Wie organiseerd dit?
  organisedBy Committee   @relation(fields: [committeeId], references: [id])
  committeeId Int
  // Wie zijn er aanwezig?
  attending   Attending[]

  // Plaatje
  photo  Photo?  @relation("activityImage")
  // Foto's genomen van deze activiteit
  photos Photo[] @relation("activityPhotos")

  // URL naar meer informatie
  url String? @db.Text

  // Is dit verwijderd?
  isActive Boolean @default(true)

  // Foreign Keys
  FinancialPersonDataActivity FinancialPersonDataActivity[]
  comments                    Comment[]
}

model ActivityLocation {
  id          Int        @id @default(autoincrement())
  name        String
  adress      String
  country     String
  postalCode  String
  city        String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isActive    Boolean    @default(true)
  Activity    Activity[]
}

model Attending {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId Int

  isAttending Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
}

// FINANCIALS

// Alle vormen van betalingen die mensen in het systeem kunnen zetten zijn alles behalve Transaction
// Die wordt gegenereerd door IBS

// Grootboek rekening
model Ledger {
  // Administratieve gegevens
  id          Int      @id
  name        String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)

  // Foreign keys
  JournalRows JournalRow[]
}

// Categorie waar een product onder kan vallen
model ProductCategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  Product     Product[]
}

enum ProductType {
  ALCOHOL
  FOOD
  OTHER
}

// Een product is alles wat verkocht en ingekocht kan worden
model Product {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String
  price       Decimal  @db.Decimal(19, 4)

  // Dit bepaald wat er in data kan staan
  productType ProductType @default(OTHER)
  // Deze is speciaal, want dit bevat niet echt nuttige data, maar kan wel leuk zijn
  data        Json        @db.Json

  // Foreign keys
  category   ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId Int
  // Een product kan niet worden verwijderd, wel uitgeschakeld
  isActive   Boolean         @default(true)
  JournalRow JournalRow[]
}

enum FinancialPersonType {
  USER
  GROUP
  ACTIVITY
  INVICTUS
  COMMITTEE
  OTHER
}

// Onder een financieel persoon valt een gebruiker, een groep van gebruikers, het dispuut, etc.
// Bijvoorbeeld 
model FinancialPerson {
  id   Int                 @id @default(autoincrement())
  type FinancialPersonType

  // Naam van het financiele persoon, denk aan "O.D.D. Invictus", "Meeborrel" of gewoon de naam van een lid
  name    String
  // Huidige saldo
  balance Decimal @default(0) @db.Decimal(19, 4)

  isActive Boolean @default(true)

  // Foreign keys
  FinancialGroup               FinancialGroup?
  FinancialPersonDataUser      FinancialPersonDataUser?
  FinancialPersonDataCommittee FinancialPersonDataCommittee?
  FinancialPersonDataActivity  FinancialPersonDataActivity?
  FinancialPersonDataOther     FinancialPersonDataOther?
  FinancialGroupPersonElement  FinancialGroupPersonElement[]

  TransactionFrom     SaldoTransaction[] @relation("TransactionFrom")
  TransactionTo       SaldoTransaction[] @relation("TransactionTo")
  Journal             Journal[]
  BankTransactionFrom BankTransaction[]
  DeclarationData     DeclarationData[]
}

// Extra data voor FinancialPerson, afhankelijk van FinancialPersonType

// FinancialPersonType.USER
// Dit is een 1-op-1 relatie met User
model FinancialPersonDataUser {
  person   FinancialPerson @relation(fields: [personId], references: [id])
  personId Int             @id
  user     User            @relation(fields: [userId], references: [id])
  userId   Int
  iban     String?
}

// FinancialPersonType.GROUP
// Verwijst naar een groepje financialpersons (bijvoorbeeld: invakancie, etc.)
model FinancialGroup {
  person   FinancialPerson @relation(fields: [personId], references: [id])
  personId Int             @id

  elements FinancialGroupPersonElement[]
}

model FinancialGroupPersonElement {
  group    FinancialGroup  @relation(fields: [groupId], references: [personId])
  groupId  Int
  person   FinancialPerson @relation(fields: [personId], references: [id])
  personId Int

  @@id([groupId, personId])
}

// FinancialPersonType.ACTIVITY
// Verwijst naar een activiteit, wordt redelijk hetzelfde gebruikt als GROUP maar voorkomt dat een groep wordt gemaakt voor elke borrel
model FinancialPersonDataActivity {
  person     FinancialPerson @relation(fields: [personId], references: [id])
  personId   Int             @id
  activity   Activity        @relation(fields: [activityId], references: [id])
  activityId Int
}

// FinancialPersonType.INVICTUS
// Verwijst naar het dispuut als financieel persoon
// Geen model nodig

// FinancialPersonType.COMMITTEE
// Verwijst naar een commissie, wordt redelijk hetzelfde gebruikt als GROUP maar maakt het makkelijk om een commissie te verwijderen
model FinancialPersonDataCommittee {
  person      FinancialPerson @relation(fields: [personId], references: [id])
  personId    Int             @id
  committee   Committee       @relation(fields: [committeeId], references: [id])
  committeeId Int
}

// FinancialPersonType.OTHER
// Verwijst naar iets of iemand, die iig niet IBS gebruiker is.
// Alleen gebruiken als het echt niet anders kan, en met duidelijke notities
// denk aan pollo, 44 etc.
model FinancialPersonDataOther {
  person      FinancialPerson @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId    Int             @id
  description String?
  email       String?
  address     String?
  postalCode  String?
  city        String?
  iban        String?
}

enum TransactionType {
  SALDO
  BANK
}

model Transaction {
  id        Int             @id @default(autoincrement())
  type      TransactionType @default(SALDO)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now()) @updatedAt

  SaldoTransaction    SaldoTransaction?
  BankTransaction     BankTransaction?
  TransactionMatchRow TransactionMatchRow[]
}

// Een transactie wordt gematched aan een Journal,
// maar een banktransactie kan ook gematched worden aan een saldo transactie
// als iemand geld overmaakt voor zijn saldo.
model TransactionMatchRow {
  id          Int     @id @default(autoincrement())
  description String?
  amount      Decimal @db.Decimal(19, 4)

  Transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int

  SaldoTransaction   SaldoTransaction? @relation(fields: [saldoTransactionId], references: [id])
  saldoTransactionId Int?              @unique

  Journal   Journal? @relation(fields: [journalId], references: [id])
  journalId Int?
}

model SaldoTransaction {
  // Administratieve gegevens
  id          Int     @id @default(autoincrement())
  description String
  // Transactie gegevens
  price       Decimal @db.Decimal(19, 4)

  // Gebruikers
  from   FinancialPerson @relation(fields: [fromId], references: [id], name: "TransactionFrom")
  fromId Int
  to     FinancialPerson @relation(fields: [toId], references: [id], name: "TransactionTo")
  toId   Int

  Transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId Int         @unique

  TransactionMatchRow TransactionMatchRow?
}

enum BankTransactionType {
  TOPUP
  TRANSFER
  CARD_PAYMENT
}

enum BankTransactionProduct {
  Savings
  Current
}

model BankTransaction {
  id  Int     @id @default(autoincrement())
  ref String?

  // Data extracted from uploaded CSV
  type          BankTransactionType
  product       BankTransactionProduct
  startedDate   DateTime
  completedDate DateTime?
  description   String
  amount        Decimal                @db.Decimal(19, 4)
  fee           Decimal                @db.Decimal(19, 4)

  Relation   FinancialPerson? @relation(fields: [relationId], references: [id])
  relationId Int?

  Transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId Int         @unique

  @@unique([type, product, startedDate, completedDate, description, amount, fee])
}

model Streeplijst {
  // Administratieve gegevens
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Wanneer is de streeplijst begonnen
  startDate DateTime?
  // Wanneer is de streeplijst afgelopen
  endDate   DateTime?

  // Wie heeft dit verwerkt
  treasurer User? @relation(fields: [userId], references: [id])
  userId    Int?

  notes String?

  sales Journal[]
}

enum JournalType {
  SALE
  PURCHASE
  DECLARATION
}

// Boekstuk
model Journal {
  id             Int          @id @default(autoincrement())
  ref            String?
  Rows           JournalRow[]
  date           DateTime?    @db.Date
  termsOfPayment Int // Aantal dagen
  tav            String?
  description    String?
  type           JournalType

  relation   FinancialPerson @relation(fields: [relationId], references: [id])
  relationId Int

  Treasurer   User? @relation(fields: [treasurerId], references: [id], onDelete: SetNull)
  treasurerId Int?

  Attachments         JournalAttachments[]
  DeclarationData     DeclarationData?
  TransactionMatchRow TransactionMatchRow[]
  Streeplijst         Streeplijst?          @relation(fields: [streeplijstId], references: [id])
  streeplijstId       Int?
}

enum DeclarationStatus {
  ACCEPTED
  DECLINED
  PENDING
}

enum ReceiveMethod {
  SALDO
  ACCOUNT
}

model DeclarationData {
  id              Int               @id @default(autoincrement())
  // Hoe is dit betaald? (Eigen rekening, bank, contant)
  methodOfPayment String            @default("Eigen rekening")
  receiveMethod   ReceiveMethod     @default(SALDO)
  status          DeclarationStatus @default(PENDING)
  iban            String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  askedAmount     Decimal           @db.Decimal(19, 4)
  reason          String

  DeclaratedBy      FinancialPerson @relation(fields: [financialPersonId], references: [id])
  financialPersonId Int

  Journal   Journal? @relation(fields: [journalId], references: [id], onDelete: SetNull)
  journalId Int?     @unique
}

// Een regel in een uitgaande factuur
model JournalRow {
  id          Int     @id @default(autoincrement())
  amount      Int
  // MySQL adviseerd 19, 4 voor geld
  price       Decimal @db.Decimal(19, 4)
  description String

  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?

  Ledger   Ledger @relation(fields: [ledgerId], references: [id])
  ledgerId Int

  Journal   Journal @relation(fields: [journalId], references: [id], onDelete: Cascade)
  journalId Int
}

model JournalAttachments {
  id       Int    @id @default(autoincrement())
  MIMEtype String
  filename String @unique
  size     Int // Bytes

  Journal   Journal? @relation(fields: [journalId], references: [id], onDelete: Cascade)
  journalId Int?
}

//
// LINK SHORTNER
//

model Link {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // De link zelf
  link String @db.Text

  // De link die de gebruiker ziet
  shortLink String @unique

  // De persoon die de link heeft aangemaakt
  user   User @relation(fields: [userId], references: [id])
  userId Int

  LinkClick LinkClick[]
}

model LinkClick {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // De link die is aangeklikt
  link   Link @relation(fields: [linkId], references: [id])
  linkId Int

  // De persoon die de link heeft aangeklikt
  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

//
// Email
//

// Een email adres
// Bestaande uit de alias (bijv. senaat@) en het domein (bijv. example.com)
// Samen vormen ze senaat@example.com
model EmailAlias {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // bijvoorbeeld senaat
  alias String @unique

  // receivers
  EmailContact        EmailContact[]
  EmailAliasCommittee EmailAliasCommittee[]
  EmailAliasUser      EmailAliasUser[]
}

model EmailAliasCommittee {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // bijvoorbeeld senaat
  alias        EmailAlias @relation(fields: [emailAliasId], references: [id], onDelete: Cascade)
  emailAliasId Int
  committee    Committee  @relation(fields: [committeeId], references: [id], onDelete: Cascade)
  committeeId  Int
}

model EmailAliasUser {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // bijvoorbeeld senaat
  alias        EmailAlias @relation(fields: [emailAliasId], references: [id], onDelete: Cascade)
  emailAliasId Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
}

// Een extern email adres waar aliassen heen kunnen sturen
// kan natuurlijk ook iets@ -> example@gmail.com
model EmailContact {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address      String
  EmailAlias   EmailAlias @relation(fields: [emailAliasId], references: [id], onDelete: Cascade)
  emailAliasId Int
}

//
// COOKIE CLICKER
//

model ClickSession {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  amount    Int
  startTime DateTime
  endTime   DateTime @default(now())
}

//
//  Playlist
//

model Track {
  id         String          @id // Geen default want dit id komt van spotify
  inPlaylist Boolean         @default(false)
  likes      TrackReaction[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model TrackReaction {
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trackId   String
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  liked     Boolean

  @@id([userId, trackId])
}

//
// PHOTO GALLERY
//

model Photo {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // Date photo taken
  date DateTime?

  // visible
  visible Boolean @default(true)

  // Photo
  filename  String @unique
  extension String

  // Heeft de backend deze foto al verwerkt?
  processed Boolean @default(false)

  // Description
  description String?

  tags PhotosWithTags[]

  uploader     User?            @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  uploaderId   Int?
  creator      PhotoCreator?    @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  creatorId    Int?
  ratings      PhotoRating[]
  peopleTagged PhotoPersonTag[]
  comments     Comment[]

  activityImage   Activity? @relation("activityImage", fields: [activityImageId], references: [id])
  activityImageId Int?      @unique
  activityPhotos  Activity? @relation("activityPhotos", fields: [activityPhotoId], references: [id], onDelete: SetNull)
  activityPhotoId Int?

  profilePicture User[] @relation("profilePicture")
}

model PhotoCreator {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  name      String   @unique

  Photo Photo[]
}

model PhotoTag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  name String @unique

  photos PhotosWithTags[]
}

model PhotosWithTags {
  photo        Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  photoId      Int
  photoTag     PhotoTag @relation(fields: [photoTagId], references: [id], onDelete: Cascade)
  photoTagId   Int
  assignedBy   User?    @relation(fields: [assignedById], references: [id], onDelete: SetNull)
  assignedById Int?

  @@id([photoId, photoTagId])
}

// Persoon x is getagd in foto y door persoon z
model PhotoPersonTag {
  tagger   User? @relation("photoTaggedBy", fields: [taggerId], references: [id], onDelete: SetNull)
  taggerId Int?

  photo   Photo @relation(fields: [photoId], references: [id], onDelete: Cascade)
  photoId Int
  user    User  @relation("taggedInPhoto", fields: [userId], references: [id], onDelete: Cascade)
  userId  Int

  @@id([photoId, userId])
}

model PhotoRating {
  rating Int @default(1)

  Photo   Photo @relation(fields: [photoId], references: [id], onDelete: Cascade)
  photoId Int
  User    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int

  @@id([photoId, userId])
}

//
// Comments 
//

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Comment
  comment String @db.LongText

  // Who made the comment?
  commenter   User @relation(fields: [commenterId], references: [id], onDelete: Cascade)
  commenterId Int

  // FKs
  photo      Photo?    @relation(fields: [photoId], references: [id], onDelete: SetNull)
  photoId    Int?
  activity   Activity? @relation(fields: [activityId], references: [id], onDelete: SetNull)
  activityId Int?
}
