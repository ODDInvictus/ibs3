// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// USER

model User {
  id                Int               @id @default(autoincrement())
  firstName         String
  lastName          String
  ldapId            String            @unique
  email             String            @unique
  nickname          String?           @unique
  picture           String?
  birthDate         DateTime?         @db.Date
  phone             String?
  firstDrink        DateTime?         @db.Date
  becameFeut        DateTime?         @db.Date
  becameMember      DateTime?         @db.Date
  lastLoggedin      DateTime          @default(now())
  StrafbakGiven     Strafbak[]        @relation("strafbakGiver")
  StrafbakReceived  Strafbak[]        @relation("strafbakReceiver")
  MaluspuntGiven    Maluspunt[]       @relation("maluspuntGiver")
  MuluspuntReceived Maluspunt[]       @relation("maluspuntReceiver")
  CommitteeMember   CommitteeMember[]
  TransactionFrom   Transaction[]     @relation("transactionFrom")
  TransactionTo     Transaction[]     @relation("transactionTo")
}

model Committee {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  ldapId          String            @unique
  CommitteeMember CommitteeMember[]
  Acivity         Activity[]
}

model CommitteeMember {
  committee   Committee @relation(fields: [committeeId], references: [id], onDelete: Cascade)
  committeeId Int
  member      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  joinDate    DateTime  @default(now()) @db.Date
  leaveDate   DateTime? @db.Date
  function    String    @default("Algemeen lid")

  @@id([committeeId, userId, joinDate])
}

// STRAFBAKKEN

model Strafbak {
  id          Int       @id @default(autoincrement())
  giver       User      @relation("strafbakGiver", fields: [giverId], references: [id])
  giverId     Int
  receiver    User      @relation("strafbakReceiver", fields: [receiverId], references: [id])
  receiverId  Int
  reason      String?
  dateCreated DateTime  @default(now())
  dateDeleted DateTime?

  @@index([giverId])
}

// MALUSPUNTEN

model Maluspunt {
  id          Int      @id @default(autoincrement())
  giver       User     @relation("maluspuntGiver", fields: [giverId], references: [id])
  giverId     Int
  receiver    User     @relation("maluspuntReceiver", fields: [receiverId], references: [id])
  receiverId  Int
  reason      String?
  dateCreated DateTime @default(now())
  amount      Int      @default(1)

  @@index([giverId])
}

// ACTIVITY

model Activity {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  start       DateTime
  location    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  membersOnly Boolean   @default(false)
  organisedBy Committee @relation(fields: [committeeId], references: [id])
  committeeId Int
}

// FINANCIALS

// TODO: Succes

// Alle vormen van betalingen die mensen in het systeem kunnen zetten zijn alles behalve Transaction
// Die wordt gegenereerd door IBS

model Ledger {
  id          Int           @id
  name        String
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isActive    Boolean       @default(true)
  Transaction Transaction[]
  Declaration Declaration[]
}

model ProductCategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  Product     Product[]
}

model Product {
  id          Int             @id @default(autoincrement())
  name        String
  description String
  price       Int
  categoryId  Int
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  isActive    Boolean         @default(true)
  data        Json            @db.Json
  Sale        Sale[]
}

model Transaction {
  id          Int      @id @default(autoincrement())
  ledger      Ledger   @relation(fields: [ledgerId], references: [id])
  ledgerId    Int
  description String
  price       Float
  from        User     @relation(fields: [fromId], references: [id], name: "transactionFrom")
  fromId      Int
  to          User     @relation(fields: [toId], references: [id], name: "transactionTo")
  toId        Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isActive    Boolean  @default(true)
}

model Sale {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
}

model Declaration {
  id              Int      @id @default(autoincrement())
  ledger          Ledger   @relation(fields: [ledgerId], references: [id])
  ledgerId        Int
  amount          Float
  reason          String
  methodOfPayment String   @default("Eigen rekening")
  accepted        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
